Documentation for Git Commands:

1. git init
    Initializes a new Git repository in the current folder.

2. ls -force
    Displays all directories and hidden files in the current folder.

3. ls -R
    Recursively lists all directories, subdirectories, and hidden files.

4. git status
    Shows the working tree status, including staged, unstaged, and untracked changes.

5. git commit -m "commit_msg"
    Creates a commit with a message describing the changes.

6. git add .
    Stages all changes in the current directory for the next commit.

7. git push
    Pushes the committed changes to the remote repository.

8. git clone [LINK]
    Creates a local copy of a remote repository using its URL.

9. git branch
    Lists all branches in the repository. The current branch is highlighted with an asterisk.

9. git branch -M main
    Renames the current branch to 'main'.

10. git commit -am "updated"
    Commits and stages changes simultaneously if modifications are made in a single file.

11. git checkout [branch_name]
    Switches to the specified branch.

12. git remote add origin [URL]
    Specifies the remote repository URL as 'origin'.

    git remote -v
    Verifies the remote repository URLs.

    git checkout <branch_name>
    Navigates to a specific branch.

    git checkout -b <new_branch_name>
    Creates and switches to a new branch.

    git branch -d <branchname>
    to delete the branch

13. git merge [branch_name]
    Merges the specified branch into the current branch.

12. git pull
     Fetches and integrates changes from the remote repository into the current branch.

13. git log
     Displays the commit history for the repository.

14. git diff
     Shows the differences between the working directory and the staging area.

15. git reset [file]
     Unstages a file while retaining its changes in the working directory.

16. git rm [file]
     Removes a file from the working directory and stages the removal.

17. git stash
     Temporarily saves changes that are not ready to be committed.

18. git stash pop
     Applies the most recently stashed changes and removes them from the stash list.

19. git remote -v
     Displays the URLs of the remote repositories.

20. git tag [tag_name]
     Creates a tag for the current commit.

    Important Concepts of Git and GitHub:

    1. Version Control:
        Git is a distributed version control system that helps track changes in files and coordinate work among multiple developers.

    2. Repositories:
        - Local Repository: Your local copy of the project.
        - Remote Repository: A repository hosted on platforms like GitHub, GitLab, or Bitbucket.

    3. Branching and Merging:
        - Branching allows you to work on different features or fixes independently.
        - Merging integrates changes from one branch into another.

    4. Staging Area:
        A space where changes are prepared before committing them to the repository.

    5. Commits:
        Snapshots of your project at a specific point in time. Each commit has a unique hash.

    6. Pull Requests (GitHub):
        A way to propose changes to a repository. It allows code review and collaboration before merging.

    7. Forking (GitHub):
        Creating a personal copy of someone else's repository to make changes without affecting the original.

    8. Collaboration:
        GitHub enables collaboration through issues, pull requests, and project boards.

    9. Git Ignore:
        Use `.gitignore` to exclude files or directories from being tracked by Git.

    10. Tags:
         Tags are used to mark specific points in history, often for releases.

    Tricks and Tips:
    - Use `git log --oneline` for a concise commit history.
    - Use `git stash` to save your work temporarily without committing.
    - Use `git rebase` to clean up commit history (with caution).
    - Use aliases in Git to simplify commands (e.g., `git config --global alias.co checkout`).
    - Use GitHub Actions to automate workflows like testing and deployment.
    - Protect branches on GitHub to enforce code reviews and prevent accidental changes.


GitHub -> code changes -> commit
git -> code changes -> add -> commit -> push->
    